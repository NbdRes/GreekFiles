# Check and install required packages
required_packages <- c("readr", "stringr", "dplyr", "writexl", "tidyr", "data.table")
new_packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)

# Load required libraries
library(readr)
library(stringr)
library(dplyr)
library(writexl)
library(tidyr)
library(data.table)
library(tcltk)

# Function to read file and count word frequencies
count_word_frequencies <- function(file_path) {
  # Read the text file
  text <- read_file(file_path)
  
  # Convert to lowercase and remove punctuation
  text <- tolower(text)
  text <- str_replace_all(text, "[[:punct:]]", "")
  
  # Split into words and count frequencies
  words <- str_split(text, "\\s+")[[1]]
  word_freq <- table(words)
  
  # Calculate total number of words
  total_words <- sum(word_freq)
  
  # Create data frame with both frequency and normalized frequency
  word_freq_df <- data.frame(
    word = names(word_freq),
    frequency = as.numeric(word_freq),
    normalized_frequency = as.numeric(word_freq) / total_words
  )
  
  return(word_freq_df)
}

# Main program
main <- function() {
  # Open folder dialog for selecting input folder
  input_folder <- tclvalue(tkchooseDirectory(title = "Select folder containing text files"))
  
  if (nchar(input_folder) == 0) {
    cat("No folder selected. Exiting program.\n")
    return()
  }
  
  # Get all text files in the folder
  txt_files <- list.files(input_folder, pattern = "*.txt", full.names = TRUE)
  
  if (length(txt_files) == 0) {
    cat("No text files found in the selected folder. Exiting program.\n")
    return()
  }
  
  cat("Processing", length(txt_files), "files...\n")
  
  # Process each file and store results
  results <- data.table()
  for (i in seq_along(txt_files)) {
    file <- txt_files[i]
    file_name <- tools::file_path_sans_ext(basename(file))
    cat("Processing file", i, "of", length(txt_files), ":", file_name, "\n")
    word_freq_df <- count_word_frequencies(file)
    word_freq_df$file_name <- file_name
    results <- rbindlist(list(results, word_freq_df), use.names = TRUE, fill = TRUE)
  }
  
  cat("Reshaping data...\n")
  
  # Reshape data efficiently using data.table
  results_wide <- dcast(results, word ~ file_name, 
                        value.var = c("normalized_frequency", "frequency"),
                        fun.aggregate = sum)
  
  cat("Sorting results...\n")
  
  # Calculate total normalized frequency
  norm_freq_cols <- grep("^normalized_frequency_", colnames(results_wide), value = TRUE)
  results_wide[, total_norm_freq := rowSums(.SD, na.rm = TRUE), .SDcols = norm_freq_cols]
  
  # Sort by total normalized frequency
  setorder(results_wide, -total_norm_freq)
  
  # Remove total_norm_freq column
  results_wide[, total_norm_freq := NULL]
  
  cat("Preparing final output...\n")
  
  # Reorder columns: word, all normalized frequencies, all frequencies
  freq_cols <- grep("^frequency_", colnames(results_wide), value = TRUE)
  setcolorder(results_wide, c("word", norm_freq_cols, freq_cols))
  
  # Open file dialog for saving Excel file
  output_file <- tclvalue(tkgetSaveFile(
    defaultextension = ".xlsx",
    filetypes = "{{Excel Files} {.xlsx}}",
    title = "Save Excel file"
  ))
  
  if (nchar(output_file) == 0) {
    cat("No save location selected. Exiting program.\n")
    return()
  }
  
  cat("Writing results to Excel file...\n")
  
  # Write to Excel file
  write_xlsx(as.data.frame(results_wide), output_file)
  
  cat("Word frequencies for all files have been saved to", output_file, "\n")
}

# Run the main program
main()
